package cz.krabec.exampleapp.api;

/**
 * NOTE: This class is auto generated by the swagger code generator program (2.4.43).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

import cz.krabec.exampleapp.model.User;
import io.swagger.annotations.*;
import jakarta.validation.Valid;
import jakarta.validation.constraints.Min;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;
import java.util.List;

@Validated
@Api(value = "user", description = "the user API")
@RequestMapping(value = "")
public interface UserApi {

    @ApiOperation(value = "Create a new user", nickname = "userCreatePost", notes = "", tags={ "User", })
    @ApiResponses(value = {
            @ApiResponse(code = 200, message = "OK"),
            @ApiResponse(code = 422, message = "The new user couldn't be created! Wrong data.") })
    @RequestMapping(value = "/user/create",
            method = RequestMethod.POST)
    ResponseEntity<?> userCreatePost(@ApiParam(value = "Data for the new user" ,required=true )  @Valid @RequestBody User newUser);


    @ApiOperation(value = "Delete the existing user", nickname = "userIdDeleteDelete", notes = "", tags={ "User", })
    @ApiResponses(value = {
            @ApiResponse(code = 200, message = "OK"),
            @ApiResponse(code = 422, message = "The user couldn't be deleted!") })
    @RequestMapping(value = "/user/{id}/delete",
            method = RequestMethod.DELETE)
    ResponseEntity<String> userIdDeleteDelete(@Min(1)@ApiParam(value = "ID of the user to delete",required=true) @PathVariable("id") Integer id);


    @ApiOperation(value = "Retrieve the details of a user", nickname = "userIdDetailGet", notes = "", response = User.class, tags={ "User", })
    @ApiResponses(value = {
            @ApiResponse(code = 200, message = "OK", response = User.class),
            @ApiResponse(code = 404, message = "The user with the specified ID doesn't exist!") })
    @RequestMapping(value = "/user/{id}/detail",
            method = RequestMethod.GET)
    ResponseEntity<?> userIdDetailGet(@Min(1)@ApiParam(value = "ID of the user to retrieve",required=true) @PathVariable("id") Integer id);


    @ApiOperation(value = "Update an existing user", nickname = "userIdUpdatePut", notes = "", tags={ "User", })
    @ApiResponses(value = {
            @ApiResponse(code = 200, message = "OK"),
            @ApiResponse(code = 422, message = "The user couldn't be updated!") })
    @RequestMapping(value = "/user/{id}/update",
            method = RequestMethod.PUT)
    ResponseEntity<?> userIdUpdatePut(@Min(1)@ApiParam(value = "ID of the user to update",required=true) @PathVariable("id") Integer id,@ApiParam(value = "Updated data for the user" ,required=true )  @Valid @RequestBody User updatedUser);


    @ApiOperation(value = "Retrieve a list of users with pagination and filtering", nickname = "userListGet", notes = "", response = User.class, responseContainer = "List", tags={ "User", })
    @ApiResponses(value = {
            @ApiResponse(code = 200, message = "OK", response = User.class, responseContainer = "List") })
    @RequestMapping(value = "/user/list",
            method = RequestMethod.GET)
    ResponseEntity<List<User>> userListGet(@ApiParam(value = "Sorting - direction", allowableValues = "asc, desc", defaultValue = "asc") @Valid @RequestParam(value = "sortDirection", required = false, defaultValue="asc") String sortDirection,@ApiParam(value = "Sorting - field name", defaultValue = "id") @Valid @RequestParam(value = "sortField", required = false, defaultValue="id") String sortField);

}
